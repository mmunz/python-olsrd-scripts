#!/usr/bin/python
# -*- coding: utf-8 -*-

# This script can be used to dynamically update your ffapi-json-file with 
# the number of currently running nodes.

# The number of running nodes is received by parsing the output of the olsr
# jsoninfo plugin.

# Version: 0.2.0

# changelog:
# 0.2.0 - cleanup, depend on shared libs in lib folder now.
# 0.1 - initial release

import os
import socket
import json
import datetime
import time
import sys
libPath = os.path.join(os.path.abspath(os.path.dirname(sys.argv[0])), 'lib')
sys.path.insert(1, libPath)
configPath = os.path.join(os.path.abspath(os.path.dirname(sys.argv[0])), 'config')
sys.path.append(configPath)
from config import config

from olsrd_jsoninfo import getTopo, uniqueIPs
from olsrd_services import getServices
from fs import writeFile

# Configuration - see config/config.py
host = config["jsoninfo"]["host"]
port = config["jsoninfo"]["port"]
olsrServices = config["nameservice"]["servicesFile"]
apiFile = config["ffapi"]["apiFile"]

def loadApiFile():
    """ Load an api file into a dictionary """
    if not os.access(apiFile, os.R_OK):
        print( 'Error: Could not read %(file)s.' % { "file": apiFile })
        print( 'Make sure the path is correct and your user has read and write permissions.')
        print( 'You need to create an API file first. This can be done at:')
        print( 'http://freifunk.net/api-generator/')
        exit()
    with open(apiFile, 'r') as ffapi:
        apidict = json.load(ffapi)
        ffapi.closed
    return apidict

def updateApiNodes(apiDict, countNodes):
    """ Updates an ffapi dictionary with number of nodes and timestamp """
    try:
        apiDict['state']['nodes'] = countNodes
    except KeyError:
        print('Could not update %(field)s in the ffapi dictionary.' % { "field": "['state']['nodes']" })

    try:
        apiDict['state']['lastchange'] = datetime.datetime.now().isoformat()
    except KeyError:
        print('Could not update %(field)s in the ffapi dictionary.' % { "field": "['state']['lastchange']" })
    return apiDict

def updateApiServices(apiDict, services):
    """ Updates the services section """
    if not 'services' in apiDict:
	apiDict['services'] = []

    for element in reversed(apiDict['services']):
	if (element['serviceDescription'] == "auto generated by olsr nameservice plugin"): 
	    apiDict['services'].remove(element)
    for line in services:
        if (line == '' or line[1] == '#' or line.split("|").__len__() < 2 ): continue
        servicesDict = dict()
        serviceList = line.split("|")
	servicesDict['serviceName'] = serviceList[2].split("\t")[0]
	servicesDict['serviceDescription'] = "auto generated by olsr nameservice plugin"
	servicesDict['internalUri'] = serviceList[0]
        apiDict['services'].append(servicesDict)
    return apiDict



def main():
    countNodes = len(uniqueIPs(getTopo(host, port)))
    apiDict = loadApiFile()
    apiDictUpdated = updateApiNodes(apiDict, countNodes)
    services, errmsg = getServices(olsrServices)
    if services:
        apiDictUpdated = updateApiServices(apiDictUpdated, services)
    else:
        print(errmsg)
    

    if writeFile(apiFile, json.dumps(apiDictUpdated, indent=4)):
        print('Update of %s successful.' % apiFile)
        print('We now have %d Nodes' % countNodes)
        if services:
            print('and %d services' % len(apiDictUpdated['services']))

if __name__ == "__main__":
    main()
